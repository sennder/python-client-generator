from typing import Any, Dict, Optional, Union

import httpx

from .base_client import BaseClient
from .models import *


class Api(BaseClient):
    """
    Autogenerated httpx async client
    """
    async def updatePet(
        self,
        body: Pet,
        body_serializer_args: Dict[str, Any] = {},
        **kwargs: Any
    ) -> Pet:
        """
        Update an existing pet by Id
        """ # noqa 

        response = await self._request(
            "PUT",
            "/pet",
            _body=body,
            body_serializer_args=body_serializer_args,
            **kwargs
        )
        response.raise_for_status()
        return Pet.parse_raw(response.content)

    async def addPet(
        self,
        body: Pet,
        body_serializer_args: Dict[str, Any] = {},
        **kwargs: Any
    ) -> Pet:
        """
        Add a new pet to the store
        """ # noqa 

        response = await self._request(
            "POST",
            "/pet",
            _body=body,
            body_serializer_args=body_serializer_args,
            **kwargs
        )
        response.raise_for_status()
        return Pet.parse_raw(response.content)

    async def findPetsByStatus(
        self,
        status: Optional[str] = "available",
        **kwargs: Any
    ) -> List[Pet]:
        """
        Multiple status values can be provided with comma separated strings
        """ # noqa 

        _query_params = { 
            "status": status,
        }

        response = await self._request(
            "GET",
            "/pet/findByStatus",
            _query_params=_query_params, 
            **kwargs
        )
        response.raise_for_status()
        return List[Pet].parse_raw(response.content)

    async def findPetsByTags(
        self,
        tags: Optional[List[str]] = None,
        **kwargs: Any
    ) -> List[Pet]:
        """
        Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
        """ # noqa 

        _query_params = { 
            "tags": tags,
        }

        response = await self._request(
            "GET",
            "/pet/findByTags",
            _query_params=_query_params, 
            **kwargs
        )
        response.raise_for_status()
        return List[Pet].parse_raw(response.content)

    async def getPetById(
        self,
        petId: int,
        **kwargs: Any
    ) -> Pet:
        """
        Returns a single pet
        """ # noqa 

        response = await self._request(
            "GET",
            f"/pet/{petId}",
            **kwargs
        )
        response.raise_for_status()
        return Pet.parse_raw(response.content)

    async def updatePetWithForm(
        self,
        petId: int,
        name: str,
        status: str,
        **kwargs: Any
    ) -> None:
        """
        
        """ # noqa 

        _query_params = { 
            "name": name,
            "status": status,
        }

        response = await self._request(
            "POST",
            f"/pet/{petId}",
            _query_params=_query_params, 
            **kwargs
        )
        response.raise_for_status()

    async def deletePet(
        self,
        petId: int,
        api_key: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        delete a pet
        """ # noqa 

        _headers = { 
            "api_key": api_key,
        }

        response = await self._request(
            "DELETE",
            f"/pet/{petId}",
            _headers=_headers,
            **kwargs
        )
        response.raise_for_status()

    async def uploadFile(
        self,
        petId: int,
        additionalMetadata: Optional[str] = None,
        **kwargs: Any
    ) -> ApiResponse:
        """
        
        """ # noqa 

        _query_params = { 
            "additionalMetadata": additionalMetadata,
        }

        response = await self._request(
            "POST",
            f"/pet/{petId}/uploadImage",
            _query_params=_query_params, 
            **kwargs
        )
        response.raise_for_status()
        return ApiResponse.parse_raw(response.content)

    async def getInventory(
        self,
        **kwargs: Any
    ) -> DictstrAny:
        """
        Returns a map of status codes to quantities
        """ # noqa 

        response = await self._request(
            "GET",
            "/store/inventory",
            **kwargs
        )
        response.raise_for_status()
        return DictstrAny.parse_raw(response.content)

    async def placeOrder(
        self,
        body: Order,
        body_serializer_args: Dict[str, Any] = {},
        **kwargs: Any
    ) -> Order:
        """
        Place a new order in the store
        """ # noqa 

        response = await self._request(
            "POST",
            "/store/order",
            _body=body,
            body_serializer_args=body_serializer_args,
            **kwargs
        )
        response.raise_for_status()
        return Order.parse_raw(response.content)

    async def getOrderById(
        self,
        orderId: int,
        **kwargs: Any
    ) -> Order:
        """
        For valid response try integer IDs with value &lt;= 5 or &gt; 10. Other values will generate exceptions.
        """ # noqa 

        response = await self._request(
            "GET",
            f"/store/order/{orderId}",
            **kwargs
        )
        response.raise_for_status()
        return Order.parse_raw(response.content)

    async def deleteOrder(
        self,
        orderId: int,
        **kwargs: Any
    ) -> None:
        """
        For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
        """ # noqa 

        response = await self._request(
            "DELETE",
            f"/store/order/{orderId}",
            **kwargs
        )
        response.raise_for_status()

    async def createUser(
        self,
        body: User,
        body_serializer_args: Dict[str, Any] = {},
        **kwargs: Any
    ) -> User:
        """
        This can only be done by the logged in user.
        """ # noqa 

        response = await self._request(
            "POST",
            "/user",
            _body=body,
            body_serializer_args=body_serializer_args,
            **kwargs
        )
        response.raise_for_status()
        return User.parse_raw(response.content)

    async def createUsersWithListInput(
        self,
        body: List[User],
        body_serializer_args: Dict[str, Any] = {},
        **kwargs: Any
    ) -> User:
        """
        Creates list of users with given input array
        """ # noqa 

        response = await self._request(
            "POST",
            "/user/createWithList",
            _body=body,
            body_serializer_args=body_serializer_args,
            **kwargs
        )
        response.raise_for_status()
        return User.parse_raw(response.content)

    async def loginUser(
        self,
        username: Optional[str] = None,
        password: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        
        """ # noqa 

        _query_params = { 
            "username": username,
            "password": password,
        }

        response = await self._request(
            "GET",
            "/user/login",
            _query_params=_query_params, 
            **kwargs
        )
        response.raise_for_status()

    async def logoutUser(
        self,
        **kwargs: Any
    ) -> None:
        """
        
        """ # noqa 

        response = await self._request(
            "GET",
            "/user/logout",
            **kwargs
        )
        response.raise_for_status()

    async def getUserByName(
        self,
        username: str,
        **kwargs: Any
    ) -> User:
        """
        
        """ # noqa 

        response = await self._request(
            "GET",
            f"/user/{username}",
            **kwargs
        )
        response.raise_for_status()
        return User.parse_raw(response.content)

    async def updateUser(
        self,
        body: User,
        username: str,
        body_serializer_args: Dict[str, Any] = {},
        **kwargs: Any
    ) -> None:
        """
        This can only be done by the logged in user.
        """ # noqa 

        response = await self._request(
            "PUT",
            f"/user/{username}",
            _body=body,
            body_serializer_args=body_serializer_args,
            **kwargs
        )
        response.raise_for_status()

    async def deleteUser(
        self,
        username: str,
        **kwargs: Any
    ) -> None:
        """
        This can only be done by the logged in user.
        """ # noqa 

        response = await self._request(
            "DELETE",
            f"/user/{username}",
            **kwargs
        )
        response.raise_for_status()


